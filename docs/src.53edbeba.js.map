{"version":3,"sources":["src/dateHelper.js","src/index.js"],"names":["targetDate","clock","document","getElementById","daysSpan","querySelector","hoursSpan","minutesSpan","secondsSpan","endtime","updateClock","t","getTimeRemaining","Date","parse","seconds","Math","floor","minutes","hours","days","innerHTML","total","clearInterval","timeinterval","setInterval","mobileMenuBtn","menu","history","pushState","animateit","_","mainContent","sections","getElementsByClassName","banner","numColors","addEventListener","curPos","scrollTop","width","body","offsetHeight","style","backgroundColor","max","documentElement","clientWidth","window","innerWidth","classList","contains","replace","section","offsetTop","outerHeight","add","readyState","goToSection","id","event","preventDefault","scrollIntoView","checked"],"mappings":";AAiEC,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EA7Dc,IAAA,EAAA,SAAAA,GAEPC,IAAAA,EAAQC,SAASC,eAAe,kBAChCC,EAAWH,EAAMI,cAAc,SAC/BC,EAAYL,EAAMI,cAAc,UAChCE,EAAcN,EAAMI,cAAc,YAClCG,EAAcP,EAAMI,cAAc,YAClCI,EAAU,oCAwCLC,SAAAA,IACDC,IAAAA,EAfCC,SAAiBH,GAClBE,IAAAA,EAAIE,KAAKC,MAAML,GAAWI,KAAKC,MAAM,IAAID,MACzCE,EAAUC,KAAKC,MAAQN,EAAE,IAAQ,IACjCO,EAAUF,KAAKC,MAAQN,EAAE,IAAK,GAAM,IACpCQ,EAAQH,KAAKC,MAAQN,EAAG,KAAe,IAEpC,MAAA,CACMA,MAAAA,EACDS,KAHDJ,KAAKC,MAAON,EAAG,OAIbQ,MAAAA,EACED,QAAAA,EACAH,QAAAA,GAIPH,CAAiBH,GACzBL,EAASiB,UAAYV,EAAES,KACvBd,EAAUe,UAAYV,EAAEQ,MACxBZ,EAAYc,UAAYV,EAAEO,QAC1BV,EAAYa,UAAYV,EAAEI,QAEvBJ,EAAEW,OAAO,GACVC,cAAcC,GAIlBd,IACIc,IAAAA,EAAeC,YAAYf,EAAY,MAChD,QAAA,QAAA;;;;ACTD,aAvDA,IAAA,EAAA,EAAA,QAAA,iBAuDA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GArDA,QAAA,gBAEA,IAAMgB,EAAgBxB,SAASC,eAAe,mBACxCwB,EAAOzB,SAASG,cAAc,WACpCuB,QAAQC,UAAU,EAAG,YAAa,cAElC,IAAMC,EAAY,SAAAC,GACVC,IAAAA,EAAc9B,SAASC,eAAe,aACtC8B,EAAW/B,SAASgC,uBAAuB,WAC3CC,EAASjC,SAASG,cAAc,WAClC+B,EAAY,EA0BhBJ,EAAYK,iBAAiB,SAzBT,WACZC,IAAAA,EAASN,EAAYO,UAKvBC,GAJAF,EAASpC,SAASuC,KAAKC,eACzBP,EAAOQ,MAAMC,gBAAgCR,cAAAA,OAAAA,GAAW,EAAIA,IAAeA,EAAU,EAArF,MAEYpB,KAAK6B,IAAI3C,SAAS4C,gBAAgBC,YAAaC,OAAOC,YAAc,GACtE,IAAK,CACXX,EAASpC,SAASuC,KAAKC,aAAe,IAAwBf,EAAKuB,UAAUC,SAAS,WACxFxB,EAAKuB,UAAUE,QAAQ,UAAW,eACzBd,EAASpC,SAASuC,KAAKC,aAAe,IAAMf,EAAKuB,UAAUC,SAAS,gBAC7ExB,EAAKuB,UAAUE,QAAQ,cAAe,WAJzB,IAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,IAMKnB,IAAAA,IAAU,EAAVA,EAAAA,EAAU,OAAA,cAAA,GAAA,EAAA,EAAA,QAAA,MAAA,GAAA,EAAA,CAArBoB,IAAAA,EAAqB,EAAA,MACxBA,EAAQC,UAAYN,OAAOO,YAAc,GAAKjB,GAChDe,EAAQH,UAAUM,IAAI,YARX,MAAA,GAAA,GAAA,EAAA,EAAA,EAAA,QAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,OAoBnBR,OAAOX,iBAAiB,SAPL,WACHrB,KAAK6B,IAAI3C,SAAS4C,gBAAgBC,YAAaC,OAAOC,YAAc,GACtE,KACVtB,EAAKuB,UAAUE,QAAQ,cAAe,cAOhB,YAAxBlD,SAASuD,WACXvD,SAASmC,iBAAiB,mBAAoBP,GAE9CA,KAEF,EAAA,EAAA,WAEAkB,OAAOU,YAAc,SAAAC,GACnBX,OAAOY,MAAMC,iBACb3D,SAASC,eAAewD,GAAIG,iBAC5BpC,EAAcqC,SAAU","file":"src.53edbeba.js","sourceRoot":"..","sourcesContent":["/*\n * using the solution on the article:\n * https://www.sitepoint.com/build-javascript-countdown-timer-no-dependencies/\n */\nexport default targetDate => {\n    //var updateClock;\n    var clock = document.getElementById('clock-deadline');\n    var daysSpan = clock.querySelector('.days');\n    var hoursSpan = clock.querySelector('.hours');\n    var minutesSpan = clock.querySelector('.minutes');\n    var secondsSpan = clock.querySelector('.seconds');\n    var endtime = 'January 25 2020 09:00:00 GMT-0300';\n    \n    /* for a endpoint to provide the endtime. \n    fetch('https://worldtimeapi.org/api/timezone/America/Fortaleza')\n        .then(data => data.json())\n        .then(json => { \n            updateClock = function (endtime) {\n                return _ => {\n                    var t = getTimeRemaining(endtime);\n                    daysSpan.innerHTML = t.days;\n                    hoursSpan.innerHTML = t.hours;\n                    minutesSpan.innerHTML = t.minutes;\n                    secondsSpan.innerHTML = t.seconds;\n                    \n                    if(t.total<=0){\n                        clearInterval(timeinterval);\n                    }\n                }\n            }(json.datetime);\n              \n            updateClock(); // run function once at first to avoid delay\n            var timeinterval = setInterval(updateClock,1000);\n        })\n        .catch(error => console.error(error));\n    */\n\n    function getTimeRemaining(endtime) {\n        var t = Date.parse(endtime) - Date.parse(new Date());\n        var seconds = Math.floor( (t/1000) % 60 );\n        var minutes = Math.floor( (t/1000/60) % 60 );\n        var hours = Math.floor( (t/(1000*60*60)) % 24 );\n        var days = Math.floor( t/(1000*60*60*24) );\n        return {\n            'total': t,\n            'days': days,\n            'hours': hours,\n            'minutes': minutes,\n            'seconds': seconds\n        };\n    }\n    function updateClock(){\n        var t = getTimeRemaining(endtime);\n        daysSpan.innerHTML = t.days;\n        hoursSpan.innerHTML = t.hours;\n        minutesSpan.innerHTML = t.minutes;\n        secondsSpan.innerHTML = t.seconds;\n\n        if(t.total<=0){\n          clearInterval(timeinterval);\n        }\n      }\n      \n      updateClock(); // run function once at first to avoid delay\n      var timeinterval = setInterval(updateClock,1000);\n};","// main.js\nimport dateHelper from \"./dateHelper\";\n\nimport \"./styles.css\";\n\nconst mobileMenuBtn = document.getElementById(\"mobile-menu-btn\");\nconst menu = document.querySelector('.navbar');\nhistory.pushState(0, \"casamento\", \"#casamento\");\n\nconst animateit = _ => {\n  const mainContent = document.getElementById(\"casamento\");\n  const sections = document.getElementsByClassName(\"section\");\n  const banner = document.querySelector(\".banner\");\n  let numColors = 1;\n  const animatePage = () => {\n    const curPos = mainContent.scrollTop;\n    if (curPos < document.body.offsetHeight) {\n      banner.style.backgroundColor = `var(--color${numColors<=5 ? numColors++ : (numColors=1)})`;\n    }\n    const width = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\n    if (width > 700) {\n      if (curPos > document.body.offsetHeight - 30 /* menu height */ && menu.classList.contains('top-nav')) {\n        menu.classList.replace('top-nav', 'sidebar-nav');\n      } else if (curPos < document.body.offsetHeight - 30 && menu.classList.contains('sidebar-nav')) {\n        menu.classList.replace('sidebar-nav', 'top-nav');\n      }\n      for (let section of sections) {\n        if (section.offsetTop - window.outerHeight / 2 <= curPos) {\n          section.classList.add(\"animate\");\n        }\n      }\n    }\n  };\n  const switchMenu = () => {\n    const width = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\n    if (width < 700) {\n      menu.classList.replace(\"sidebar-nav\", \"top-nav\");\n    }\n  }\n  mainContent.addEventListener(\"scroll\", animatePage);\n  window.addEventListener('resize', switchMenu);\n};\n\nif (document.readyState === 'loading') {\n  document.addEventListener(\"DOMContentLoaded\", animateit);\n} else {\n  animateit();\n}\ndateHelper();\n\nwindow.goToSection = id => {\n  window.event.preventDefault();\n  document.getElementById(id).scrollIntoView();\n  mobileMenuBtn.checked = false;\n};\n\n//document.documentElement.style.setProperty('--page-bg-color', this.checked ? 'black' : 'whitesmoke');"]}